#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Note_App_with_Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="forpractice")]
	public partial class LinqToSqlDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNota(Nota instance);
    partial void UpdateNota(Nota instance);
    partial void DeleteNota(Nota instance);
    #endregion
		
		public LinqToSqlDataClassesDataContext() : 
				base(global::Note_App_with_Database.Properties.Settings.Default.forpracticeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Nota> Notas
		{
			get
			{
				return this.GetTable<Nota>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notas")]
	public partial class Nota : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Titulo;
		
		private string _Nota1;
		
		private string _Hora;
		
		private string _Hora_Archivado;
		
		private bool _Pendiente_Archivado;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTituloChanging(string value);
    partial void OnTituloChanged();
    partial void OnNota1Changing(string value);
    partial void OnNota1Changed();
    partial void OnHoraChanging(string value);
    partial void OnHoraChanged();
    partial void OnHora_ArchivadoChanging(string value);
    partial void OnHora_ArchivadoChanged();
    partial void OnPendiente_ArchivadoChanging(bool value);
    partial void OnPendiente_ArchivadoChanged();
    #endregion
		
		public Nota()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titulo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Titulo
		{
			get
			{
				return this._Titulo;
			}
			set
			{
				if ((this._Titulo != value))
				{
					this.OnTituloChanging(value);
					this.SendPropertyChanging();
					this._Titulo = value;
					this.SendPropertyChanged("Titulo");
					this.OnTituloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Nota", Storage="_Nota1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nota1
		{
			get
			{
				return this._Nota1;
			}
			set
			{
				if ((this._Nota1 != value))
				{
					this.OnNota1Changing(value);
					this.SendPropertyChanging();
					this._Nota1 = value;
					this.SendPropertyChanged("Nota1");
					this.OnNota1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hora", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Hora
		{
			get
			{
				return this._Hora;
			}
			set
			{
				if ((this._Hora != value))
				{
					this.OnHoraChanging(value);
					this.SendPropertyChanging();
					this._Hora = value;
					this.SendPropertyChanged("Hora");
					this.OnHoraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Hora Archivado]", Storage="_Hora_Archivado", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Hora_Archivado
		{
			get
			{
				return this._Hora_Archivado;
			}
			set
			{
				if ((this._Hora_Archivado != value))
				{
					this.OnHora_ArchivadoChanging(value);
					this.SendPropertyChanging();
					this._Hora_Archivado = value;
					this.SendPropertyChanged("Hora_Archivado");
					this.OnHora_ArchivadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Pendiente/Archivado]", Storage="_Pendiente_Archivado", DbType="Bit NOT NULL")]
		public bool Pendiente_Archivado
		{
			get
			{
				return this._Pendiente_Archivado;
			}
			set
			{
				if ((this._Pendiente_Archivado != value))
				{
					this.OnPendiente_ArchivadoChanging(value);
					this.SendPropertyChanging();
					this._Pendiente_Archivado = value;
					this.SendPropertyChanged("Pendiente_Archivado");
					this.OnPendiente_ArchivadoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
